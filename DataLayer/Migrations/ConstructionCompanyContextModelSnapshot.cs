// <auto-generated />
using System;
using DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataLayer.Migrations
{
    [DbContext(typeof(ConstructionCompanyContext))]
    partial class ConstructionCompanyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataLayer.Models.ConstructionSite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedById");

                    b.Property<DateTime?>("DateFinish");

                    b.Property<DateTime?>("DateStart");

                    b.Property<int>("OpenStatus");

                    b.Property<decimal>("ProjectWorth");

                    b.Property<string>("Title");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("ConstructionSites");
                });

            modelBuilder.Entity("DataLayer.Models.ConstructionSiteManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserId");

                    b.Property<int?>("UserId1");

                    b.HasKey("Id");

                    b.HasIndex("UserId1");

                    b.ToTable("ConstructionSiteManagers");
                });

            modelBuilder.Entity("DataLayer.Models.ConstructionSiteSiteManager", b =>
                {
                    b.Property<int>("ConstructionSiteId");

                    b.Property<int>("ConstructionSiteManagerId");

                    b.HasKey("ConstructionSiteId", "ConstructionSiteManagerId");

                    b.HasIndex("ConstructionSiteManagerId");

                    b.ToTable("ConstructionSiteSiteManager");
                });

            modelBuilder.Entity("DataLayer.Models.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime?>("PurchaseDate");

                    b.Property<int>("Quantity");

                    b.Property<string>("SerialNumber");

                    b.HasKey("Id");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("DataLayer.Models.Manager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Manager");
                });

            modelBuilder.Entity("DataLayer.Models.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Unit");

                    b.HasKey("Id");

                    b.ToTable("Material");
                });

            modelBuilder.Entity("DataLayer.Models.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Title");

                    b.Property<int>("WorksheetId");

                    b.HasKey("Id");

                    b.HasIndex("WorksheetId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("DataLayer.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<bool>("NeedToChangePassword");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("DataLayer.Models.Worker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("JobDescription");

                    b.Property<string>("TelephoneNumber");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Workers");
                });

            modelBuilder.Entity("DataLayer.Models.WorkerTask", b =>
                {
                    b.Property<int>("WorkerId");

                    b.Property<int>("TaskId");

                    b.Property<string>("WorkDescription");

                    b.HasKey("WorkerId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("WorkerTask");
                });

            modelBuilder.Entity("DataLayer.Models.Worksheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ConstructionSiteId");

                    b.Property<DateTime>("Date");

                    b.Property<int?>("GetConstructionSiteManagerId");

                    b.Property<bool>("IsLocked");

                    b.Property<string>("Remarks");

                    b.Property<string>("WeatherConditions");

                    b.HasKey("Id");

                    b.HasIndex("ConstructionSiteId");

                    b.HasIndex("GetConstructionSiteManagerId");

                    b.ToTable("Worksheets");
                });

            modelBuilder.Entity("DataLayer.Models.WorksheetEquipment", b =>
                {
                    b.Property<int>("WorksheetId");

                    b.Property<int>("EquipmentId");

                    b.Property<int>("Amount");

                    b.Property<DateTime>("UsageEnd");

                    b.Property<DateTime>("UsageStart");

                    b.HasKey("WorksheetId", "EquipmentId");

                    b.HasIndex("EquipmentId");

                    b.ToTable("WorksheetEquipment");
                });

            modelBuilder.Entity("DataLayer.Models.WorksheetMaterial", b =>
                {
                    b.Property<int>("WorksheetId");

                    b.Property<int>("MaterialId");

                    b.Property<double>("Amount");

                    b.HasKey("WorksheetId", "MaterialId");

                    b.HasIndex("MaterialId");

                    b.ToTable("WorksheetMaterial");
                });

            modelBuilder.Entity("DataLayer.Models.ConstructionSite", b =>
                {
                    b.HasOne("DataLayer.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("DataLayer.Models.ConstructionSiteManager", b =>
                {
                    b.HasOne("DataLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("DataLayer.Models.ConstructionSiteSiteManager", b =>
                {
                    b.HasOne("DataLayer.Models.ConstructionSite", "ConstructionSite")
                        .WithMany("ConstructionSiteManagers")
                        .HasForeignKey("ConstructionSiteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Models.ConstructionSiteManager", "ConstructionSiteManager")
                        .WithMany("ConstructionSites")
                        .HasForeignKey("ConstructionSiteManagerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Models.Manager", b =>
                {
                    b.HasOne("DataLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Models.Task", b =>
                {
                    b.HasOne("DataLayer.Models.Worksheet", "Worksheet")
                        .WithMany("Tasks")
                        .HasForeignKey("WorksheetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Models.Worker", b =>
                {
                    b.HasOne("DataLayer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Models.WorkerTask", b =>
                {
                    b.HasOne("DataLayer.Models.Task", "Task")
                        .WithMany("WorkerTasks")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Models.Worker", "Worker")
                        .WithMany("WorkerTasks")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Models.Worksheet", b =>
                {
                    b.HasOne("DataLayer.Models.ConstructionSite", "ConstructionSite")
                        .WithMany()
                        .HasForeignKey("ConstructionSiteId");

                    b.HasOne("DataLayer.Models.ConstructionSiteManager", "GetConstructionSiteManager")
                        .WithMany("Worksheets")
                        .HasForeignKey("GetConstructionSiteManagerId");
                });

            modelBuilder.Entity("DataLayer.Models.WorksheetEquipment", b =>
                {
                    b.HasOne("DataLayer.Models.Equipment", "Equipment")
                        .WithMany("WorksheetEquipment")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Models.Worksheet", "Worksheet")
                        .WithMany("WorksheetEquipment")
                        .HasForeignKey("WorksheetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Models.WorksheetMaterial", b =>
                {
                    b.HasOne("DataLayer.Models.Material", "Material")
                        .WithMany("WorksheetMaterials")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Models.Worksheet", "Worksheet")
                        .WithMany("WorksheetMaterials")
                        .HasForeignKey("WorksheetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
